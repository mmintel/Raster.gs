$raster-row-set: false;

/*
 * apply bugfixes to old internet explorers
 * ---
 * @type bool
 */

$old-ie: false !default;

/*
 * set the name of the class that is used as a grid row
 * ---
 * @type string
 */

$raster-row: '.grid-row' !default;
/*
 * calculate the widths of each column related to the given ratios and return each value in a list
 * ---
 * @access private
 * ---
 * @param {list}   $ratios      - a list of ratios representing the columns
 * @param {number} $gutterWidth - number for spacing between columns
 * ---
 * @returns {list}
 * ---
 * @example
 *  _rs-columnWidths($ratios: (1,0.5,1,0.5), $gutterWidth: 2)
 */

@function _rs-columnWidths($ratios, $gutterWidth){
    @if type-of($ratios) != list {
        @warn '#{$ratios} is no valid input for $ratios of _rs-columnWidths.';
        @return false;
    }
    @if type-of($gutterWidth) != number or $gutterWidth < 0 {
        @warn '#{$gutterWidth} is no valid input for $gutterWidth of _rs-columnWidths.';
        @return false;
    }
    $columns: length($ratios);
    $columnWidths: ();
    $totalGutterWidth: $gutterWidth * ($columns - 1);
    @each $ratio in $ratios {
        $width: (((100 - $totalGutterWidth) / $columns) * $ratio);
        $columnWidths: append($columnWidths, $width);
    }
    @return $columnWidths;
}
/*
 * calculate the margins of each column related to the given ratios and return each value in a list
 * ---
 * @access private
 * ---
 * @param {list}   $ratios      - a list of ratios representing the columns
 * @param {number} $gutterWidth - number for spacing between columns
 * ---
 * @returns {list}
 */

@function _rs-columnMargins($ratios, $gutterWidth){
    @if type-of($ratios) != list {
        @warn '#{$ratios} is no valid input for $ratios of _rs-columnMargins.';
        @return false;
    }
    @if type-of($gutterWidth) != number or $gutterWidth < 0 {
        @warn '#{$gutterWidth} is no valid input for $gutterWidth of _rs-columnMargins.';
        @return false;
    }
    $columnWidths: _rs-columnWidths($ratios, $gutterWidth);
    $columns: length($ratios);
    $marginList: ();
    $margin: 0;
    @for $column from 1 through $columns {
        @for $m from 1 through ($column){
            @if $m == 1 {
                $margin: 0;
            } @else {
                $margin: $margin + nth($columnWidths, ($m - 1)) + ($gutterWidth);
            }
        }
        $marginList: append($marginList, $margin);
    }
    @return $marginList;
}
/*
 * choose a column and get its margin from the list created before
 * ---
 * @access private
 * ---
 * @param {list}   $ratios      - a list of ratios representing the columns
 * @param {number} $gutterWidth - number for spacing between columns
 * @param {number} $n           - position of column to pick from list
 * ---
 * @returns {measure}
 */

@function _rs-getColumnMargin($ratios, $gutterWidth, $n){
    @if type-of($ratios) != list {
        @warn '#{$ratios} is no valid input for $ratios of _rs-getColumnMargin.';
        @return false;
    }
    @if type-of($gutterWidth) != number or $gutterWidth < 0 {
        @warn '#{$gutterWidth} is no valid input for $gutterWidth of _rs-getColumnMargin.';
        @return false;
    }
    @if type-of($n) != number or $n < 0 or $n > length($ratios) {
        @warn '#{$n} is no valid input for $n of _rs-getColumnMargin.';
        @return false;
    }
    $result: nth(_rs-columnMargins($ratios, $gutterWidth),$n);
    @if $result == 0 {
        @return $result;
    }
    @if $result > 0 {
        @return $result * 1%;
    }
}
/*
 * parses columns into list of ratios if needed
 * ---
 * @access private
 * ---
 * @param {number|list} $columns
 * ---
 * @return {$list}
 */

@function _rs-parseColumns($columns) {
    @if type-of($columns) != number and type-of($columns) != list {
        @warn '#{$columns} is no valid input for $columns of _rs-parseColumns.';
        @return false;
    }
    @if length($columns) == 1 {
        $columnLength: $columns;
        $ratios: ();
        @for $n from 1 through $columns {
            $ratios: append($ratios, 1);
        }
        @return $ratios;
    } @else {
        @return $columns;
    }
}
/*
 * checks whether columns are all equal to each other
 * ---
 * @access private
 * ---
 * @returns {bool}
 */

@function _rs-hasEqualColumns($ratios) {
    $hasEqualColumns: true;
    @each $item in $ratios {
        @if $item != 1 {
            $hasEqualColumns: false;
        }
    }
    @return $hasEqualColumns;
}
/*
 * generate the styles for each column
 * ---
 * @access private
 */

@mixin _rs-column($selector, $ratios, $gutterWidth, $from, $to:false) {
    $column: $from;
    $prefix: str-slice($selector, 2);
    //first column should always start a new row
    @if $column == 1 {
        @extend #{'%'+$prefix}-clear;
    }
    //because of possible rounding errors we float the last column to the right
    @if $column == length($ratios) or $to == length($ratios) and $column > 1 {
        @extend #{'%'+$prefix}-last;
    } @else {
        @extend #{'%'+$prefix}-float-left;
        @if $old-ie == false {
            @extend #{'%'+$prefix}-margin-right;
            $columnMargin: _rs-getColumnMargin($ratios, $gutterWidth, $column);
            @if $columnMargin == 0 {
                @extend #{'%'+$prefix}-margin-left-zero;
            } @else {
                @each $margin in _rs-columnMargins($ratios, $gutterWidth) {
                    @extend #{'%'+$prefix}-margin-left-#{$margin*10000};
                }
            }
        } @else {
            margin-left: $gutterWidth;
        }
    }
    @if _rs-hasEqualColumns($ratios) {
        @extend #{'%'+$prefix}-width;
    } @else {
        @each $width in _rs-columnWidths($columns, $gutterWidth) {
            @extend #{'%'+$prefix}-width-#{$width*10000};
        }
    }
}

@mixin _rs-singleColumns($selector, $ratios, $gutterWidth) {
    //create the selectors for each column and include their styles
    $columns: _rs-parseColumns($ratios);
    @for $column from 1 through length($columns)  {
        #{$selector}-#{$column} {
            @include _rs-column($selector, $columns, $gutterWidth, $column);
        }
    }
}

@mixin _rs-combinedColumns($selector, $ratios, $gutterWidth) {
    $columns: _rs-parseColumns($ratios);
    @for $from from 1 through (length($columns) - 1) { //remove 1 from the list because we don't want a combination for the last column
        @for $to from ($from + 1) through length($columns) {
            #{$selector}-#{$from}-#{$to} {
                @include _rs-column($selector, $columns, $gutterWidth, $from, $to);
            }
        }
    }
}

/*
 * create a grid system
 * ---
 * @access public
 * ---
 * @param {list|number} $columns              - a list of ratios representing each column or a number for amount of equal columns
 * @param {string}      $prefix       ('g')   - a prefix to give your grid a name
 * @param {number}      $gutterWidth  (2)     - spacing between your columns
 * @param {bool}        $combinations (true)  - toggle combinations of columns
 * @param {bool}        $quiet        (false) - toggle creation of real classes or just placeholders
 */

@mixin raster($columns, $prefix:g, $gutterWidth: 2, $combinations: true, $quiet: false) {
    @if type-of($columns) != number and type-of($columns) != list {
        @error '#{$columns} is no valid input for $columns of mixin raster.';
    }
    @if type-of($columns) == list {
        @each $column in $columns {
            @if type-of($column) != number and unitless($column) == true {
                @error 'Item "#{$column}" of list $columns in mixin raster must be a number without a unit';
            }
        }
    }
    @if type-of($prefix) != string{
        @error '#{$prefix} is no valid input for $columns of mixin raster.';
    }
    @if type-of($gutterWidth) != number and unitless($gutterWidth) == true or $gutterWidth < 0 {
        @error '#{$gutterWidth} is no valid input for $columns of mixin raster.';
    }
    @if type-of($combinations) != bool {
        @error '#{$combinations} is no valid input for $columns of mixin raster.';
    }
    @if type-of($quiet) != bool {
        @error '#{$quiet} is no valid input for $columns of mixin raster.';
    }
    $columnLength: $columns;
    @if type-of($columns) == list {
        $columnLength: length($columns);
    }

    //if $columns contains only a number instead of a list of ratios, a ratios list is generated where all ratios are set to 1
    $selector: '.';
    @if $quiet {
        $selector: '%';
    }
    $selector: $selector+$prefix;

    #{'%'+$prefix}-float-left {
        float: left;
    }

    #{'%'+$prefix}-margin-right {
        margin-right: -100%;
    }

    #{'%'+$prefix}-clear {
        clear: both;
    }

    #{'%'+$prefix}-margin-left-zero {
        margin-left: 0;
    }

    #{'%'+$prefix}-last {
        margin-right: 0;
        float: right;
    }
    $columns: _rs-parseColumns($columns);
    @if _rs-hasEqualColumns($columns) {
        #{'%'+$prefix}-width {
            width: _rs-getEqualColumnWidth($columns, $gutterWidth);
        }
    } @else {
        @each $width in _rs-columnWidths($columns, $gutterWidth) {
            #{'%'+$prefix}-width-#{$width*10000} {
                width: $width * 1%;
            }
        }
    }

    @each $margin in _rs-columnMargins($columns, $gutterWidth) {
        @if $margin != 0 {
            #{'%'+$prefix}-margin-left-#{$margin*10000} {
                margin-left: $margin * 1%;
            }
        } @else {
            #{'%'+$prefix}-margin-left-#{$margin*10000} {
                @extend #{'%'+$prefix}-margin-left-zero;
            }
        }
    }

    @include _rs-singleColumns($selector, $columns, $gutterWidth);
    //if needed: create the combined selectors and include their styles
    @if $combinations {
        @include _rs-combinedColumns($selector, $columns, $gutterWidth);
    }


    //provide a more semantic selector for full width columns
    #{$selector}-full {
        @extend #{'%'+$prefix}-clear;
        @extend #{'%'+$prefix}-margin-left-zero;
        width: 100%;
    }

    //provide a selector for hidden columns
    #{$selector}-hidden {
        display: none;
    }

    //provide a selector for columns that are not the "first column" but that should start in a new row
    #{$selector}-first {
        @extend #{'%'+$prefix}-clear;
    }
}

@if not $raster-row-set { //create the row only once
    #{$raster-row} {
        @if $old-ie {
            *zoom: 1;
        }
        &:before,
        &:after {
            content: " ";
            display: table;
        }

        &:after {
            clear: both;
        }
    }
    $raster-row-set: true;
}