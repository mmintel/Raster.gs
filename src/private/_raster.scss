@charset "UTF-8";

//Author: Marc Mintel <marc@mintel.me>
//Twitter: @marcmintel
//Team: webfactory GmbH <info@webfactory.de>
//Licensed under MIT Open Source
//**
//* PLEASE REPORT ISSUES ON GITHUB https://github.com/webfactory/Raster.gs
//**
@import '../settings';

/* checks if there are equal columns or ratio based ones
 * ---
 * @access private
 * ---
 * @return {bool}
 */

@function _rs-is-equal($columns) {
    @if type-of($columns) == number {
        @return true;
    } @else if type-of($columns) == list {
        $equalColumns: true;
        $oldColumn: false;
        @each $column in $columns {
            @if $oldColumn == false {
                $oldColumn: $column;
            } @else {
                @if $column != $oldColumn {
                    $equalColumns: false;
                }
            }
            $oldColumn: $column;
        }
        @return $equalColumns;
    }
    @return false;
}

/* transforms column from number to list
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @return {list}
 */

@function _rs-parse-columns($columns) {
    @if type-of($columns) == number {
        $cols: ();
        @for $i from 1 through $columns {
            $column: 100/$columns;
            $cols: append($cols, $column)
        }
        @return $cols;
    }
    @return $columns;
}

/* calculates the width for each column 
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @returns {list}
 */

@function _rs-column-widths($columns, $gutter) {
    $columns: _rs-parse-columns($columns);
    $numberOfColumns: length($columns);
    $totalGutterWidth: $gutter * ($numberOfColumns - 1);
    $totalWidth: 100 - $totalGutterWidth;
    $widths: ();
    @each $column in $columns {
        @if $column != $columns {
            $width: $totalWidth * ($column / 100);
            $widths: append($widths, $width);
        }
    }
    @return $widths;
}

/* get the width from a list 
 * ---
 * @access private
 * ---
 * @param {number} - $column  - a number over 0 for the first column
 * @param {number} - $span    - a number over $column for the length of columns
 * @param {list}   - $columns - a list containing widths for columns
 * @param {number} - $gutter  - a number for the gutter between columns
 * ---
 * @returns {number}
 */

@function _rs-get-width($column, $span, $columns, $gutter) {
    $columns: _rs-column-widths($columns, $gutter);
    $numberOfColumns: length($columns);
    $width: 0;
    @if $span == null {
        $span: $column;
    }
    @for $n from $column through $span {
        $col: nth($columns, $n);
        $width: $width + $col;
    }
    $width: $width + ($gutter * ($span - $column));
    @return $width;
}

/* get the width from a list and parse it to percentages 
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @returns {measure}
 */

@function _rs-parse-width($column, $span, $columns, $gutter) {
    $width: _rs-get-width($column, $span, $columns, $gutter);
    $parsedWidths: 0;
    @if $width != 0 {
        @if $width == 100.0 {
            @return 100%;
        } @else {
            $parsedWidths: $width * 1%;
        }
    }
    @return $parsedWidths;
}

/* calculates the margin for each column 
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @returns {list}
 */

@function _rs-column-margins($columns, $gutter) {
    $columns: _rs-parse-columns($columns);
    $numberOfColumns: length($columns);
    $margin: 0;
    $margins: ($margin); //first margin is always 0
    //loop through columns except last one, there is no column
    //after the last one so we dont need a margin for that
    @for $n from 1 through $numberOfColumns - 1 {
        $span: _rs-get-width(1, $n, $columns, $gutter);
        $margin: $span + $gutter;
        $margins: append($margins, $margin);
    }
    @return $margins;
}

/* get the margin for a column from a list of margins
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @returns {number}
 */

@function _rs-get-margin($column, $columns, $gutter) {
    $margins: _rs-column-margins($columns, $gutter);
    $numberOfColumns: length($columns);
    $margin: nth($margins, $column);
    @return $margin;
}

/* get a margin from a list and parse it to percentages
 * ---
 * @access private
 * ---
 * @param {number|list}
 * ---
 * @returns {measure}
 */

@function _rs-parse-margin($column, $columns, $gutter) {
    $margin: _rs-get-margin($column, $columns, $gutter);
    $parsedMargin: 0;
    @if $margin != 0 {
        @if $margin == 100.0 {
            @return 100%;
        } @else {
            $parsedMargin: $margin * 1%;
        }
    }
    @return $parsedMargin;
}

%_rs-column-base {
    margin-right: -100%;
}

%_rs-first-column {
    @extend %_rs-column-base;
    margin-left: 0;
    clear: both;
}

%_rs-last-column {
    float: right;
}

%_rs-default-column {
    @extend %_rs-column-base;
    float: left;
}

/* creates a new grid system
 * ---
 * @access private
 * ---
 * @param {number|list}  $columns       (12)       - number of columns or list for ratios
 * @param {string}       $prefix        ('raster') - number of columns
 * @param {number}       $gutter        (2)        - width of gutter between columns
 * @param {bool}         $combinations  (true)     - toggle creation of classes combining columns
 * @param {bool}         $helpers       (true)     - toggle creation of helper classes
 * @param {bool}         $quiet         (false)    - set to true if you just need placeholder classes for extends
 * ---
 * @example
 *  @include _raster(); //creates default 12 column grid
 *  @include _raster($columns:(20,60,20); //first column is 20%, second 60%, third 20%
 */

@mixin _raster($columns: 12, $prefix: 'column', $gutter: 2, $combinations: true, $helpers: true, $quiet: false) {
    $columns: _rs-parse-columns($columns);
    $numberOfColumns: length($columns);
    $selector: '.';
    @if $quiet {
        $selector: '%';
    }

    $oldSingleColumnWidthPlaceholder: false;
    $oldSingleColumnMarginPlaceholder: false;
    @for $column from 1 through $numberOfColumns {
        $singleColumnWidthPlaceholder: '.'+$prefix+'-'+ceil(_rs-get-width($column, null, $columns, $gutter))*1000;
        //create the placeholder only once
        @if $singleColumnWidthPlaceholder != $oldSingleColumnWidthPlaceholder {
            #{$singleColumnWidthPlaceholder} {
                width: _rs-parse-width($column, null, $columns, $gutter);
            }
        }
        $oldSingleColumnWidthPlaceholder: $singleColumnWidthPlaceholder;

        $singleColumnMarginPlaceholder: '.'+$prefix+'-'+ceil(_rs-get-margin($column, $columns, $gutter))*1000;
        //create the placeholder only once
        @if $singleColumnMarginPlaceholder != $oldSingleColumnMarginPlaceholder {
            #{$singleColumnMarginPlaceholder} {
                margin-left: _rs-parse-margin($column, $columns, $gutter);
            }
        }
        $oldSingleColumnMarginPlaceholder: $singleColumnMarginPlaceholder;
        
        #{$selector+$prefix}-#{$column} {
            @if $column == 1 {
                @extend %_rs-first-column;
            } @else if $column == $numberOfColumns {
                @extend %_rs-last-column;
            } @else {
                @extend %_rs-default-column;
            }
            @extend #{$singleColumnWidthPlaceholder};
            @extend #{$singleColumnMarginPlaceholder};
        }
    }

    @if $combinations {
        @for $column from 1 through ($numberOfColumns - 1) { //remove 1 from the list because we don't want a combination for the last column

            $oldMultiColumnWidthPlaceholder: false;
            $oldMultiColumnMarginPlaceholder: false;
            @for $span from ($column + 1) through $numberOfColumns {

                $multiColumnWidthPlaceholder: '%'+$prefix+'-'+ceil(_rs-get-width($column, $span, $columns, $gutter))*1000;
                //create the placeholder only once
                @if $multiColumnWidthPlaceholder != $oldMultiColumnWidthPlaceholder {
                    #{$multiColumnWidthPlaceholder} {
                        width: _rs-parse-width($column, $span, $columns, $gutter);
                    }
                }
                $oldMultiColumnWidthPlaceholder: $multiColumnWidthPlaceholder;

                $multiColumnMarginPlaceholder: '%'+$prefix+'-'+ceil(_rs-get-margin($column, $columns, $gutter))*1000;
                //create the placeholder only once
                @if $multiColumnMarginPlaceholder != $oldMultiColumnMarginPlaceholder {
                    #{$multiColumnMarginPlaceholder} {
                        margin-left: _rs-parse-margin($column, $columns, $gutter);
                    }
                }
                $oldMultiColumnMarginPlaceholder: $multiColumnMarginPlaceholder;
                
                #{$selector+$prefix}-#{$column}-#{$span} {
                    @if $column == 1 {
                        @extend %_rs-first-column;
                    } @else if $span == $numberOfColumns {
                        @extend %_rs-last-column;
                    } @else {
                        @extend %_rs-default-column;
                    }
                    @extend #{$multiColumnMarginPlaceholder};
                    @extend #{$multiColumnWidthPlaceholder};
                }
            }
        }
    }

    //provide a more semantic selector for full width columns
    .#{$prefix}-full {
        clear: left;
        margin-left: 0;
        width: 100%;
    }

    //provide a selector for hidden columns
    .#{$prefix}-hidden {
        display: none;
    }

    //provide a selector for columns that are not the "first column" but that should start in a new row
    .#{$prefix}-first {
        clear: both;
    }

    @if not $_rs-grid-row-created {
        #{$rs-grid-row} {
            *zoom: 1;
            &:before,
            &:after {
                content: " ";
                display: table;
            }

            &:after {
                clear: both;
            }
        }
    }
}